#!/usr/bin/python

"""muse - Muse Audio File Manager

Usage: muse -c|--cmp <path1> <path2>
       muse -h|--help
       muse --version

Options:
    -c --cmp      Compare two files or libraries
    -h --help     Show this screen
       --version  Show version

"""

import filecmp
import os
import sys

sys.path.append(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), "lib"))
from docopt       import docopt
from muse.factory import createAudioFile

arguments = docopt(__doc__, version='1.0')
path1 = arguments['<path1>'] if '<path1>' in arguments else os.path.join(os.path.expanduser("~"), "Music")
path2 = arguments['<path2>'] if '<path2>' in arguments else "/mnt/wdtvlivehub/Music"

if "--cmp" in arguments and os.path.isfile(path1):
    file1 = createAudioFile(path1)
    file2 = createAudioFile(path2)
    
    if file1.compareAudio(file2):
        print "Audio portions equate in files %s and %s" % (path1, path2)
    else:
        print "Audio portions differ in files %s and %s" % (path1, path2)
        
    sys.exit(0)
        
remote = "/mnt/wdtvlivehub/Music"
local  = os.path.join(os.path.expanduser("~"), "Music")

if not os.path.exists(remote):
    os.mkdir(remote)
    
if not os.path.exists(local):
    os.mkdir(local)
  
os.chdir(local)
allFiles    = {}
filesBySize = {}
remoteFiles = {}
localFiles  = {}
missingRoot = None;

for dirPath, subDirs, files in os.walk("."):
    relPath = dirPath[1:]
    
    if not os.path.isdir(remote + relPath):
        if relPath.endswith("/.mediaartlocal"):
            continue
            
        if missingRoot == None or not relPath.startswith(missingRoot):
            print remote + " does not contain directory " + relPath
            missingRoot = relPath
    else:
        missingRoot = None
        
    for file in files:
        filePath  = dirPath + "/" + file
        audioFile = createAudioFile(filePath)
        
        if not audioFile:
            continue
            
        if file in allFiles:
            otherFile = allFiles[file]

            if audioFile.getSize() == otherFile.getSize():
                if audioFile.compareAudio(otherFile):
                    print "Identical audio in files " + audioFile.filePath + " and " + otherFile.filePath
                else:
                    print "Same sized files " + audioFile.filePath + " and " + otherFile.filePath
            else:
                print "Same named files " + audioFile.filePath + " and " + otherFile.filePath
        else:
            allFiles[file] = audioFile
        
        if not os.path.isfile(remote + relPath + "/" + file):
            if not missingRoot:
                print remote + relPath + " does not contain file " + file
                
sys.exit(0)
